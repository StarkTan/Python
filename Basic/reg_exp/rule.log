参考网页：https://www.cnblogs.com/dyfblog/p/5880728.html
针对Python
一：元字符
.            匹配任意字符，不包括特殊字符
^            匹配开始位置,多行模式下匹配每一行开始
$            匹配结束位置，多行模式下匹配每一行结束
*            匹配一个元字符0到多次
+            匹配一个元字符1到多次
?            匹配一个元字符0到1次
{m,n}        匹配一个元字符m到n次
\\           转义字符，跟在其后的字符将失去作为特殊元字符的意义
[]           字符集，可匹配其中任意一个字符
|            逻辑表达式 或。
(...)        分组，默认为捕获，即被分组的内容可以被单独取出，默认每个分组有个索引，从 1 开始，按照"("的顺序决定索引值
(?iLmsux)    分组中可以设置模式，iLmsux之中的每个字符代表一个模式,用法参见 模式 I
(?:...)      分组的不捕获模式，计算索引时会跳过这个分组
(?P<name>...)分组的命名模式，取此分组中的内容时可以使用索引也可以使用name
(?P=name)    分组的引用模式，可在同一个正则表达式用引用前面命名过的正则
(?#...)      注释，不影响正则表达式其它部分,用法参见 模式 I
(?=...)      顺序肯定环视，表示所在位置右侧能够匹配括号内正则
(?!...)      顺序否定环视，表示所在位置右侧不能匹配括号内正则
(?<=...)     逆序肯定环视，表示所在位置左侧能够匹配括号内正则
(?<!...)     逆序否定环视，表示所在位置左侧不能匹配括号内正则
(?(id/name)yes|no)
             若前面指定id或name的分区匹配成功则执行yes处的正则，否则执行no处的正则
\number      匹配和前面索引为number的分组捕获到的内容一样的字符串
\A           匹配字符串开始位置，忽略多行模式
\Z           匹配字符串结束位置，忽略多行模式
\b           匹配位于单词开始或结束位置的空字符串
\B           匹配不位于单词开始或结束位置的空字符串
\d           匹配一个数字， 相当于 [0-9]
\D           匹配非数字,相当于 [^0-9]
\s           匹配任意空白字符， 相当于 [ \t\n\r\f\v]
\S           匹配非空白字符，相当于 [^ \t\n\r\f\v]
\w           匹配数字、字母、下划线中任意一个字符， 相当于 [a-zA-Z0-9_]
\W           匹配非数字、字母、下划线中的任意字符，相当于 [^a-zA-Z0-9_]

二：模式  re_flag_example.py
I            IGNORECASE， 忽略大小写的匹配模式
L            LOCALE， 字符集本地化。比如法语环境可以匹配"é"，中文环境没有用
M            MULTILINE，多行模式, 改变 ^ 和 $ 的行为
S            DOTALL，此模式下 '.' 的匹配不受限制，可匹配任何字符，包括换行符
X            VERBOSE，冗余模式， 此模式忽略正则表达式中的空白和#号的注释，例如写一个匹配邮箱的正则表达式
U            UNICODE，使用 \w, \W, \b, \B 这些元字符时将按照 UNICODE 定义的属性.

正则表达式的模式是可以同时使用多个的，在 python 里面使用按位或运算符 | 同时添加多个模式
如 re.compile('', re.I|re.M|re.S)


三：函数
compile(pattern, flags=0)
    给定一个正则表达式 pattern，指定使用的模式 flags 默认为0 即不使用任何模式,然后会返回一个 SRE_Pattern
escape(pattern)
    转义 为字符串pattern中元字符进行转义，返回转义之后的字符串
findall(pattern, string, flags=0)
    参数 pattern 为正则表达式, string 为待操作字符串, flags 为所用模式，
    函数作用为在待操作字符串中寻找所有匹配正则表达式的字串，返回一个列表，如果没有匹配到任何子串，返回一个空列表。
finditer(pattern, string, flags=0)
    参数和作用与 findall 一样，不同之处在于 findall 返回一个列表， finditer 返回一个迭代器
    而且迭代器每次返回的值并不是字符串，而是一个 SRE_Match (re 内置对象用法) 对象，这个对象的具体用法见 match 函数
match(pattern, string, flags=0)
    使用指定正则去待操作字符串中寻找可以匹配的子串, 返回匹配上的第一个字串，并且不再继续找
    需要注意的是 match 函数是从字符串开始处开始查找的，如果开始处不匹配，则不再继续寻找，返回值为 一个 SRE_Match
purge()
    清除正则缓存
    re模块在处理正则表达式的时候会先编译一下，并将编译后的正则放在缓存中，当频繁使用正则时提升效率
search(pattern, string, flags=0)
    函数类似于 match，不同之处在于不限制正则表达式的开始匹配位置
split(pattern, string, maxsplit=0, flags=0)
    使用正则切割字符串
    参数 maxsplit 指定切分次数， 函数使用给定正则表达式寻找切分字符串位置，返回包含切分后子串的列表，
    如果匹配不到，则返回包含原字符串的一个列表
sub(pattern, repl, string, count=0, flags=0)
    替换函数，将正则表达式 pattern 匹配到的字符串替换为 repl 指定的字符串,  参数 count 用于指定最大替换次数
subn(pattern, repl, string, count=0, flags=0)
    作用与函数 sub 一样， 唯一不同之处在于返回值为一个元组，第一个值为替换后的字符串，第二个值为发生替换的次数
template(pattern, flags=0)
    和 compile 差不多，不过不支持 +、？、*、｛｝ 作用不明
TODO  example
四：re 内置对象
SRE_Pattern     这个对象是一个编译后的正则表达式，编译后不仅能够复用和提升效率，
                同时也能够获得一些其他的关于正则表达式的信息
                属性：
                flags       编译时指定的模式
                groupindex  以正则表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内
                groups      正则表达式中分组的数量
                pattern     编译时用的正则表达式
                函数：
                findall、finditer、match、search、split、sub、subn等

SRE_Match       这个对象会保存本次匹配的结果，包含很多关于匹配过程以及匹配结果的信息
                属性：
                endpos      本次搜索结束位置索引
                lastgroup   本次搜索匹配到的最后一个分组的别名
                lastindex   本次搜索匹配到的最后一个分组的索引
                pos         本次搜索开始位置索引
                re          本次搜索使用的 SRE_Pattern 对象
                regs        列表，元素为元组，包含本次搜索匹配到的所有分组的起止位置
                string      本次搜索操作的字符串
                函数
                end([group=0])        返回指定分组的结束位置，默认返回正则表达式所匹配到的最后一个字符的索引
                expand(template)      根据模版返回相应的字符串，类似与 sub 函数里面的 repl， 可使用 \1 或者 \g<name> 来选择分组
                group([group1, ...])  根据提供的索引或名字返回响应分组的内容，默认返回 start() 到 end() 之间的字符串， 提供多个参数将返回一个元组
                groupdict([default=None])
                                      返回一个包含所有匹配到的命名分组的字典，没有命名的分组不包含在内，
                                      key 为组名，value 为匹配到的内容，参数 default 为没有参与本次匹配的命名分组提供默认值
                groups([default=None])以元组形式返回每一个分组匹配到的字符串，包括没有参与匹配的分组，其值为 default
                span([group])         返回指定分组的起止位置组成的元组，默认返回由 start() 和 end() 组成的元组
                start([group])        返回指定分组的开始位置，默认返回正则表达式所匹配到的第一个字符的索引

五：分组用法 TODO  example
六：环视用法 TODO  example
